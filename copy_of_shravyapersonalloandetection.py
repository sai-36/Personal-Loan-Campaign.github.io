# -*- coding: utf-8 -*-
"""Copy of shravyaPersonalLoanDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HqGJaEyGLRSw2jTxRXkkxWZCfpf405ke

Problem Statement:

---
Predict whether a customer will respond to a Personal Loan Campaign!<br> 
● perform data exploration, preprocessing and visualization<br> 
● implement Classification algorithms using sklearn library <br>
● evaluate the model using appropriate performance metrics <br>
● develop the Personal loan campaign model..

Columns:

---
ID : Customer ID<br>
Age : Customer's age in completed years<br>
Experience : No. of years of professional experience<br>
Income : Annual income of the customer<br>
ZIP Code : Home Address Zip Code<br>
Family : Family size of the customer<br>
CCAvg : Avg. Spending on Credit Card per Month<br>
Education : Education Level. 1: Undergrad; 2: Graduate; 3: Advanced / Professional<br>
Mortgage : Value of house mortgage if any<br>
Personal Loan : Did this customer accept the personal loan offered in the last campaign?<br>
Securities Account : Does the customer have a securities account with the bank?<br>
CD Account : Does the customer have a certificate of deposit (CD) account with the bank?<br>
Online : Does the customer use internet banking facilities?
<br>Credit card : Does the customer use a credit card issued by this Bank?

#Imports
"""

import pandas as pd
import numpy as numpy
import matplotlib.pyplot as plt
import seaborn as sns

"""#EDA"""
df = pd.read_csv("Bank_Personal_Loan_Modelling.csv")

df.head(10)

df.isnull().sum()

df.info()

df.shape

# df.columns
# '''Correlation Check'''
# cor = df.corr() #find the pairwise correlation of all columns

# print(cor)

# fig, ax = plt.subplots(figsize = (15, 15))
# sns.heatmap(cor, annot = True, linewidths = .3)
# plt.show()

# sns.heatmap(cor) #graphical representation of data using colors to visualize the value of the matrix.

# #Remove Age or Experience -> highly coorelated

# """#Data Viz"""

# # df.plot()
# ax=sns.distplot(df["Personal Loan"])
# print(df["Personal Loan"].mean())
# plt.show()

# sns.pairplot(df, hue ='Personal Loan')
# plt.show()

# # from pandas_profiling import ProfileReport
# # ProfileReport(df)



# df.plot(subplots=True, figsize=(8, 8)); #make separate subplots for each column

df = df.drop(['Experience'], axis = 1)
df = df.drop(['ZIP Code'], axis = 1)
df = df.drop(['ID'], axis = 1)

cols = list(df.columns)
print(cols)


df['Personal Loan'].value_counts()

# sns.countplot(x ='Personal Loan', data=df) #counts of observations of Personal Account using bars
# plt.show()

# sns.barplot(x = 'Personal Loan',y = 'Income',data = df)
# plt.show()

# sns.barplot(x = 'Personal Loan',y = 'CCAvg',data = df)
# plt.show()

# sns.barplot(x = 'Personal Loan',y = 'Income',data = df)
# plt.show()



"""#Logistic Regression"""

X = df.drop(['Personal Loan'], axis = 1)
y = df['Personal Loan'] #categorical dependent variable

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn import metrics
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=100) # 20% testing set
logreg = LogisticRegression()
logreg.fit(X_train, y_train)

y_pred = logreg.predict(X_test)
print(y_pred)
print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))

# accuracy_score(y_test, y_pred)

from sklearn.metrics import confusion_matrix
confusion_matrix = confusion_matrix(y_test, y_pred)
print(confusion_matrix)
TP=confusion_matrix[0][0]
FP=confusion_matrix[0][1]
FN=confusion_matrix[1][0]
TN=confusion_matrix[1][1]
print("True positive: "+str(confusion_matrix[0][0]))
print("False positive: "+str(confusion_matrix[0][1]))
print("False negative: "+str(confusion_matrix[1][0]))
print("True negative: "+str(confusion_matrix[1][1]))
print("precision: "+str(TP/(TP+FP)))
print("recall: "+ str( TP/(TP+FN)))

"""#Decision Tree"""

X = df.drop(['Personal Loan'], axis = 1)
y = df['Personal Loan']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4, random_state = 0)

from sklearn.tree import DecisionTreeClassifier
clf_en = DecisionTreeClassifier(criterion='gini', max_depth=4, random_state=0)
clf_en.fit(X_train, y_train)
y_pred_en = clf_en.predict(X_test)


print("Accuracy: "+str(accuracy_score(y_test, y_pred_en)))

#accuracy_score(y_test, y_pred_en)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred_en)
print('Confusion matrix\n\n', cm)
TP=cm[0][0]
FP=cm[0][1]
FN=cm[1][0]
TN=cm[1][1]
print("True positive: "+str(cm[0][0]))
print("False positive: "+str(cm[0][1]))
print("False negative: "+str(cm[1][0]))
print("True negative: "+str(cm[1][1]))
print("precision: "+str(TP/(TP+FP)))
print("recall: "+ str( TP/(TP+FN)))

# from sklearn.tree import export_graphviz
# import graphviz

# # Generate the Graphviz representation of the decision tree
# dot_data = export_graphviz(clf_en, out_file=None,
#                            feature_names=X.columns,  
#                            class_names=['0', '1'],  
#                            filled=True, rounded=True,  
#                            special_characters=True)

# # Visualize the decision tree using the Graphviz module
# graph = graphviz.Source(dot_data)
# graph.render("loan_decision_tree") # save the tree as PDF
# graph

# from sklearn.metrics import roc_curve
# y_pred_prob = clf_en.predict_proba(X_test)[:, 1]
# # Performance of classification model
# # Compute false positive rate, true positive rate, and thresholds
# fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)

# # Plot ROC curve
# plt.plot(fpr, tpr)
# plt.xlabel('False Positive Rate')
# plt.ylabel('True Positive Rate')
# plt.title('ROC Curve')
# plt.show()

"""#Random Forest"""

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.6, random_state=42)
X_train.shape, X_test.shape

from sklearn.ensemble import RandomForestClassifier
classifier_rf = RandomForestClassifier(random_state=12, n_jobs=-1, max_depth=4,
                                       n_estimators=10, oob_score=True)

classifier_rf.fit(X_train, y_train)

# from sklearn.metrics import roc_curve
# y_pred_prob = classifier_rf.predict_proba(X_test)[:, 1]
# # Performance of classification model
# # Compute false positive rate, true positive rate, and thresholds
# fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)

# # Plot ROC curve
# plt.plot(fpr, tpr)
# plt.xlabel('False Positive Rate')
# plt.ylabel('True Positive Rate')
# plt.title('ROC Curve')
# plt.show()

classifier_rf.fit(X_train, y_train)
classifier_rf.oob_score_
import pickle
pickle.dump(classifier_rf, open('model.pkl', 'wb'))
model = pickle.load(open('model.pkl', 'rb'))



# import gradio as gr
# import numpy  as np
# import pandas as pd
# from sklearn.ensemble import RandomForestClassifier
# from sklearn.metrics import accuracy_score

# df = pd.read_csv("/content/drive/MyDrive/Copy of Bank_Personal_Loan_Modelling.csv")
# X = df.drop("Personal Loan", axis=1)
# y = df["Personal Loan"]

# def train_model(n_estimators, max_depth):
#     clf = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth, random_state=12)
#     clf.fit(X_train, y_train)
#     y_pred = clf.predict(X_test)
#     return accuracy_score(y_test, y_pred)

# def predict_loan_approval(Age, Income, Family, CCAvg, Education, Mortgage, SecuritiesAccount, CDAccount, Online, CreditCard):
#     sample= np.array([Age, Income, Family, CCAvg, Education, Mortgage, SecuritiesAccount, CDAccount, Online, CreditCard]).reshape(1,-1)
#     prediction=classifier_rf.predict(sample)    
#     return "Approved" if prediction[0] == 1 else "Not Approved"

# # Splitting the dataset into training and testing set
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=100)

# # Creating the Gradio interface
# input_components = [
#     gr.inputs.Number(label="Age"),
#     gr.inputs.Number(label="Income"),
#     gr.inputs.Number(label="Family"),
#     gr.inputs.Number(label="CCAvg"),
#     gr.inputs.Number(label="Education"),
#     gr.inputs.Number(label="Mortgage"),
#     gr.inputs.Checkbox(label="Securities Account"),
#     gr.inputs.Checkbox(label="CD Account"),
#     gr.inputs.Checkbox(label="Online"),
#     gr.inputs.Checkbox(label="Credit Card")
# ]

# interface = gr.Interface(
#     fn=predict_loan_approval,
#     inputs=input_components,
#     outputs=gr.outputs.Textbox(label="Loan Approval"),
#     title="Bank Loan Approval Prediction",
#     description="Predict whether a customer will get a personal loan from the bank based on various factors.",
#     layout="vertical",
#     theme="compact"
# )

# # Launching the interface
# interface.launch(debug = True,share=True)


    